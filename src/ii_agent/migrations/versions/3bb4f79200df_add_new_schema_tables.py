"""Add new schema tables

Revision ID: 3bb4f79200df
Revises: a89eabebd4fa
Create Date: 2025-08-05 14:01:08.043835

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = "3bb4f79200df"
down_revision: Union[str, None] = "a89eabebd4fa"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("email", sa.VARCHAR(length=255), nullable=False),
        sa.Column("password_hash", sa.VARCHAR(length=255), nullable=True),
        sa.Column("first_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("last_name", sa.VARCHAR(length=100), nullable=True),
        sa.Column("role", sa.VARCHAR(length=50), nullable=True),
        sa.Column("subscription_tier", sa.VARCHAR(length=50), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("email_verified", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("last_login_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("metadata", sqlite.JSON(), nullable=True),
        sa.Column("login_provider", sa.VARCHAR(length=50), nullable=True),
        sa.Column("organization", sa.VARCHAR(length=50), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
    )
    op.create_index("idx_users_email", "users", ["email"], unique=False)
    op.create_table(
        "ii_keys",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("name", sa.VARCHAR(length=255), nullable=False),
        sa.Column("key_hash", sa.VARCHAR(length=255), nullable=False),
        sa.Column("prefix", sa.VARCHAR(length=20), nullable=False),
        sa.Column("permissions", sqlite.JSON(), nullable=True),
        sa.Column("expires_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("last_used_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("usage_count", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_ii_keys_prefix", "ii_keys", ["prefix"], unique=False)
    op.create_table(
        "llm_settings",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("provider", sa.VARCHAR(length=100), nullable=False),
        sa.Column("encrypted_api_key", sa.VARCHAR(length=500), nullable=True),
        sa.Column("base_url", sa.VARCHAR(length=500), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("metadata", sqlite.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "idx_llm_settings_user_provider",
        "llm_settings",
        ["user_id", "provider"],
        unique=False,
    )
    op.create_table(
        "mcp_settings",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("mcp_config", sqlite.JSON(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "sandboxes",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("provider", sa.VARCHAR(length=50), nullable=True),
        sa.Column("sandbox_id", sa.VARCHAR(length=255), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("template", sa.VARCHAR(length=100), nullable=True),
        sa.Column("status", sa.VARCHAR(length=50), nullable=True),
        sa.Column("cpu_limit", sa.Integer(), nullable=True),
        sa.Column("memory_limit", sa.Integer(), nullable=True),
        sa.Column("disk_limit", sa.Integer(), nullable=True),
        sa.Column("network_enabled", sa.Boolean(), nullable=True),
        sa.Column("metadata", sqlite.JSON(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("started_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("stopped_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("last_activity_at", sa.TIMESTAMP(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("sandbox_id"),
    )
    op.create_index(
        "idx_sandboxes_sandbox_id", "sandboxes", ["sandbox_id"], unique=False
    )
    op.create_index("idx_sandboxes_status", "sandboxes", ["status"], unique=False)
    op.create_index("idx_sandboxes_user_id", "sandboxes", ["user_id"], unique=False)
    op.create_table(
        "sessions",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("user_id", sa.String(length=36), nullable=False),
        sa.Column("status", sa.VARCHAR(length=50), nullable=True),
        sa.Column("sandbox_id", sa.VARCHAR(length=255), nullable=True),
        sa.Column("current_plan", sqlite.JSON(), nullable=True),
        sa.Column("token_usage", sqlite.JSON(), nullable=True),
        sa.Column("settings", sqlite.JSON(), nullable=True),
        sa.Column("state_storage", sa.VARCHAR(length=500), nullable=True),
        sa.Column("public_url", sa.VARCHAR(length=500), nullable=True),
        sa.Column("is_public", sa.Boolean(), nullable=True),
        sa.Column("last_message_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("updated_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("deleted_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("workspace_dir", sa.String(), nullable=False),
        sa.Column("device_id", sa.String(), nullable=True),
        sa.Column("name", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["user_id"], ["users.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("workspace_dir"),
    )
    op.create_index("idx_sessions_created_at", "sessions", ["created_at"], unique=False)
    op.create_index("idx_sessions_status", "sessions", ["status"], unique=False)
    op.create_index("idx_sessions_user_id", "sessions", ["user_id"], unique=False)
    op.create_table(
        "events",
        sa.Column("id", sa.String(length=36), nullable=False),
        sa.Column("session_id", sa.String(length=36), nullable=False),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("content", sqlite.JSON(), nullable=False),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(), nullable=True),
        sa.Column("timestamp", sa.DateTime(), nullable=True),
        sa.Column("event_type", sa.String(), nullable=True),
        sa.Column("event_payload", sqlite.JSON(), nullable=True),
        sa.ForeignKeyConstraint(["session_id"], ["sessions.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("idx_events_created_at", "events", ["created_at"], unique=False)
    op.create_index("idx_events_session_id", "events", ["session_id"], unique=False)
    op.create_index("idx_events_type", "events", ["type"], unique=False)
    op.drop_table("event")
    op.drop_table("session")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "session",
        sa.Column("id", sa.VARCHAR(length=36), nullable=False),
        sa.Column("workspace_dir", sa.VARCHAR(), nullable=False),
        sa.Column("created_at", sa.DATETIME(), nullable=True),
        sa.Column("device_id", sa.VARCHAR(), nullable=True),
        sa.Column("name", sa.VARCHAR(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("workspace_dir"),
    )
    op.create_table(
        "event",
        sa.Column("id", sa.VARCHAR(length=36), nullable=False),
        sa.Column("session_id", sa.VARCHAR(length=36), nullable=False),
        sa.Column("timestamp", sa.DATETIME(), nullable=True),
        sa.Column("event_type", sa.VARCHAR(), nullable=False),
        sa.Column("event_payload", sqlite.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["session_id"], ["session.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.drop_index("idx_events_type", table_name="events")
    op.drop_index("idx_events_session_id", table_name="events")
    op.drop_index("idx_events_created_at", table_name="events")
    op.drop_table("events")
    op.drop_index("idx_sessions_user_id", table_name="sessions")
    op.drop_index("idx_sessions_status", table_name="sessions")
    op.drop_index("idx_sessions_created_at", table_name="sessions")
    op.drop_table("sessions")
    op.drop_index("idx_sandboxes_user_id", table_name="sandboxes")
    op.drop_index("idx_sandboxes_status", table_name="sandboxes")
    op.drop_index("idx_sandboxes_sandbox_id", table_name="sandboxes")
    op.drop_table("sandboxes")
    op.drop_table("mcp_settings")
    op.drop_index("idx_llm_settings_user_provider", table_name="llm_settings")
    op.drop_table("llm_settings")
    op.drop_index("idx_ii_keys_prefix", table_name="ii_keys")
    op.drop_table("ii_keys")
    op.drop_index("idx_users_email", table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###
